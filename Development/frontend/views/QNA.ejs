<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Q&A Section</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-KK94CHFLLe+nY2dmCWGMq91rCGa5gtU4mk92HdvYe+M/SXH301p5ILy+dN9+nJOZ" crossorigin="anonymous">
        <link
        rel="stylesheet"
        href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
        integrity="sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw=="
        crossorigin="anonymous"
        referrerpolicy="no-referrer"
      />
    <link rel="stylesheet" href="/css/QNA.css">
</head>
<style>
   
    .accordion {
        margin: 0 auto;
        width: 90%;
    }
    .blockquote-footer {
       margin-left: 2em;
    }
    .bg-color{
        background-color: #F0F0F0;
    }
    .card-bg{
        background-color: #fff;
    }
    .alert-info {
      color: black !important;
      background-color: #D0D0D0 !important;
      border-color: #D0D0D0 !important;
    }
    .accordion-button:not(.collapsed) {
    color: black !important;
    background-color: #e7f1ff !important;
    box-shadow: none !important;
    }
    


</style>
<body class="bg-color">
  <%- include('./partials/navbar') %>

  <h3 class="my-3 mx-5 text-dark"> Course Name </h3>
   
    <div class="container-fluid question-container">
       
    </div>

      <!-- Insert button -->
      <button
      type="button"
      class="btn btn-success btn-insert-modal position-fixed"
      data-bs-toggle="modal"
      data-bs-target="#insertModal"
      style="right: 2em; bottom: 2em; height: 3em; width: 3em;"
    >
      <i class="fa-solid fa-plus btn-insert-modal text-light"></i>
    </button>

    <!-- Insert Modal -->
    
      <div
        class="modal fade"
        id="insertModal"
        tabindex="-1"
        aria-labelledby="insertModalLabel"
        aria-hidden="true"
      >
        <div class="modal-dialog modal-dialog-centered">
          <div class="modal-content p-5">
            <div class="modal-header">
              <h1 class="modal-title fs-5" id="insertModalLabel">
                Ask your Question
              </h1>
              <button
                type="button"
                class="btn-close"
                data-bs-dismiss="modal"
                aria-label="Close"
              ></button>
            </div>
            <div class="mb-3">
              
              <textarea
                type="text"
                class="form-control"
                id="questionText-in"
                name="questionText"
                required
                placeholder="Ask your question"
                rows = "3"
              ></textarea>
            </div>
            <button class="btn btn-primary askquestion-submit-btn">
              POST
            </button>
          </div>
        </div>
      </div>

       <!-- Edit Modal -->
    
       <div
       class="modal fade"
       id="editModal"
       tabindex="-1"
       aria-labelledby="editModalLabel"
       aria-hidden="true"
     >
       <div class="modal-dialog modal-dialog-centered">
         <div class="modal-content p-5">
           <div class="modal-header">
             <h1 class="modal-title fs-5" id="editModalLabel">
               Edit your Question
             </h1>
             <button
               type="button"
               class="btn-close"
               data-bs-dismiss="modal"
               aria-label="Close"
             ></button>
           </div>
           <div class="mb-3">
             
             <textarea
               type="text"
               class="form-control"
               id="questionText-edit"
               name="questionText"
               required
               placeholder="Edit your question"
               rows = "3"
             ></textarea>
           </div>
           <button class="btn btn-primary editquestion-submit-btn">
             POST
           </button>
         </div>
       </div>
     </div>
   
    

</body>
<script>
  var questions = <%- JSON.stringify(questions) %>;
  var id = <%- JSON.stringify(id) %>;
  var replies = <%- JSON.stringify(replies) %>;
  var content = ``;

  questions.forEach((question,idx) => {
    var replycontent = ``;
    replies[idx].forEach((reply)=>{
        replycontent+=`<div class="alert alert-info" role="alert">
          ${reply.replyText}
          <br>
          <div class="reply-info d-flex justify-content-between">
          <cite title="Replied by" class="blockquote-footer" style="margin-left : 2em; margin-top: 0.3em;">${reply.username}</cite>
          <a href="#" data-id = "${reply._id}" class="btn btn-danger mx-3 delete-reply" ><i class="fa-solid fa-trash" data-id = "${reply._id}"></i></a>
          </div>
        </div>`
    })
    content += `<div class="accordion my-3 shadow" id="accordionExample">
    <div class="accordion-item">
      <h2 class="accordion-header" id="headingOne">
        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse${question._id}" aria-expanded="true" aria-controls="collapse${question._id}">

            <blockquote class="blockquote w-100">
                <p class="text-dark">${question.questionText}</p>
                <div class="card-functionality-right d-flex justify-content-end">
                  <a href="#" data-id = "${question._id}" class="btn btn-modal btn-primary edit-question" data-bs-toggle="modal" data-bs-target="#editModal"><i data-id = "${question._id}" class="fa-solid fa-pen-to-square"></i></a>
                  <a href="#" data-id = "${question._id}" class="btn btn-danger mx-3 delete-question" ><i class="fa-solid fa-trash" data-id = "${question._id}"></i></a>
                  </div>
                <footer class="blockquote-footer mt-3">Posted by <cite title="Asked by">${question.username}</cite></footer>
              </blockquote>


        </button>
      </h2>
      <div id="collapse${question._id}" class="accordion-collapse collapse" aria-labelledby="headingOne">
        <div class="accordion-body">
          
            <div class="form-floating">
              <textarea class="form-control" placeholder="Leave a  reply here" id="replyText" style="height: 100px" name="replyText"></textarea>
              <label for="floatingTextarea2">Add your reply..</label>
            </div>
            <button type="submit" class="btn btn-primary reply-btn mt-3" data-id = "${question._id}">Reply</button>
         
        </div>
      </div>
    </div>
    
    <div class="accordion-item">
      <h2 class="accordion-header" id="headingTwo">
        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse${question._id}Two" aria-expanded="false" aria-controls="collapse${question._id}Two">
          <div>View replies</div>
        </button>
      </h2>
      <div id="collapse${question._id}Two" class="accordion-collapse collapse" aria-labelledby="headingTwo">
        <div class="accordion-body">

        ${replycontent}
        </div>
      </div>
    </div>
    </div>`;
  });
  
  document.querySelector(".question-container").innerHTML += content;

    const askquest_btn = document.querySelector(".askquestion-submit-btn");
    console.log("Hello");
    askquest_btn.addEventListener("click", () => {
      const questionText = document.querySelector("#questionText-in").value;
      if (questionText === "") {
        alert("Please enter a question");
      }
      else
      {
        const postQuestion = async ()=>{
          const json = await fetch(`http://localhost:3000/courses/question/${id}`, {
            method: "POST",
          
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              questionText,
            }),
          });
         // console.log("Hello");
          const data = await json.json();
          if(data.success === true)
          {
            alert("Question posted successfully");
            window.location.reload();
          }
          else
          {
            alert("Error posting question");
          }
        }
        postQuestion();
        }
    });

  //delete Question functionality
document.querySelectorAll('.delete-question').forEach((question)=>{
  question.addEventListener('click', (e)=>{
   const id = e.target.dataset.id;
   if(confirm(`Are you sure you want to delete this question?`))
    {
      fetch(`/courses/delete-question/${e.target.dataset.id}`, {
        method: 'DELETE'
      }).then((res)=>{
        return res.json();
      }).then((data)=>{
        console.log(data);
        if(confirm(`Question deleted successfully`))
        window.location.reload();
      }).catch((err)=>{
        console.log(err);
      });
    }
  })
})

//edit question functionality
      var response = {};
      console.log(document.querySelectorAll('.edit-question'))
      document.querySelectorAll('.edit-question').forEach((row)=>row.addEventListener('click', (e)=>{
      console.log(e.target)
      let obj = undefined;
      questions.forEach((question)=> {
        if(question._id === e.target.dataset.id)
        {
          console.log(e.target.dataset.id)
          obj = question;
          return;
        }
      })
      response = obj;
      console.log(response)
      document.querySelector('#questionText-edit').value = obj.questionText;
      }))
      document.querySelector('.editquestion-submit-btn').addEventListener('click', ()=> {
      response.questionText = document.querySelector('#questionText-edit').value;
      if(response.questionText!=='')
      {
        fetch(`http://localhost:3000/courses/update-question/${response._id}`, {
        method: 'PATCH',
          headers: {
            'Content-type': 'application/json'
          },
          body: JSON.stringify(response)
        }).then((res)=>{
          return res.json();
        }).then((data)=>{
          console.log(data);
          if(confirm(`Question edited successfully`))
          window.location.reload();
        }).catch((err)=>{
          console.log(err);
        });
      }
      else
      {
        alert('Please enter a question');
      }
      });

//reply post functionality
document.querySelectorAll('.reply-btn').forEach((reply)=>{
  reply.addEventListener('click', (e)=>{
    const replyText = e.target.parentElement.querySelector('#replyText').value;
    if(replyText === '')
    {
      alert('Please enter a reply');
    }
    else
    {
      const postReply = async ()=>{
        const json = await fetch(`http://localhost:3000/courses/question/reply/${e.target.dataset.id}`, {
          method: "POST",
        
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            replyText,
          }),
        });
       // console.log("Hello");
        const data = await json.json();
        if(data.success === true)
        {
          alert("Reply posted successfully");
          window.location.reload();
        }
        else
        {
          alert("Error posting reply");
        }
      }
      postReply();
    }
  })
})

//reply delete functionality

document.querySelectorAll('.delete-reply').forEach((reply)=>{
  reply.addEventListener('click', (e)=>{
   const id = e.target.dataset.id;
   if(confirm(`Are you sure you want to delete this reply?`))
    {
      fetch(`/courses/delete-reply/${e.target.dataset.id}`, {
        method: 'DELETE'
      }).then((res)=>{
        return res.json();
      }).then((data)=>{
        console.log(data);
        if(confirm(`reply deleted successfully`))
        window.location.reload();
      }).catch((err)=>{
        console.log(err);
      });
    }
  })
})



</script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"
integrity="sha384-ENjdO4Dr2bkBIFxQpeoTz1HIcje39Wm4jDKdf19U8gI4ddQ3GYNS7NTKfAdVQSZe"
crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js" integrity="sha384-IQsoLXl5PILFhosVNubq5LC7Qb9DXgDA9i+tQ8Zj3iwWAwPtgFTxbJ8NT4GN1R8p" crossorigin="anonymous"></script>

</html>